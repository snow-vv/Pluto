server {

    listen   80 default;
    # server_name log.gengmei.cc log.igengmei.com;
    #server_name  log.gmeialphaapp.com log.iyanzhi.com;
    server_name  log.gmeiapp.com log.iyanzhi.com log-collector.igengmei.com;

    client_max_body_size 4G;

    location /lua {
    	set $test "hello, world.";
    	content_by_lua '
        	ngx.header.content_type = "text/plain";
        	ngx.say(ngx.var.test);
    	';
    }

    location /log/collect {
        lua_need_request_body on;
        content_by_lua '
            local zlib = require "zlib"
            local encoding = ngx.req.get_headers()["Content-Encoding"]
            if encoding == "gzip" then
                local body = ngx.req.get_body_data()
                local stream = zlib.inflate()
                local info = stream(body, "finish")
                local cjson = require "cjson"
                local data = cjson.decode(info)

            	local file = io.open("/data/log/nginx/collect.log", "a+")
                for key, value in pairs(data) do
           	    file:write(" \\n", cjson.encode(value))
                end
                file:close()

                ngx.update_time()
                local now = ngx.now()
                local filename_2 = "/data/log/nginx-alpha-maidian/collect/collect."..ngx.today().."."..ngx.var.pid..".log"
                local file = io.open(filename_2, "a+")
                for key, value in pairs(data) do
                    value.gm_nginx_key = key
                    value.gm_nginx_timestamp = now
                    file:write(cjson.encode(value).."\\n")
                end
                file:close()

                ngx.req.set_body_data(info)
            end';

        access_log /data/log/nginx/access.log post_log;
    }

    location /log/collect/web {
        lua_need_request_body on;
        add_header Access-Control-Allow-Origin *;
        content_by_lua '
            local zlib = require "zlib"
            local cjson = require "cjson"
            local encoding = ngx.req.get_headers()["Content-Encoding"]

            local body = ngx.req.get_body_data()
            local decoded_body

            if encoding == "gzip" then
                local stream = zlib.inflate()
                decoded_body = stream(body, "finish")
            else
                decoded_body = body
            end
            local data = cjson.decode(decoded_body)

            local filename = "/data/log/nginx/collect.log"
            local file=io.open(filename, "a+")
            file:write(cjson.encode(data).."\\n")
            file:close()

            ngx.update_time()
            local now = ngx.now()
            local filename_2 = "/data/log/nginx-alpha-maidian/collect-web/collect-web."..ngx.today().."."..ngx.var.pid..".log"
            local file = io.open(filename_2, "a+")
            data.gm_nginx_content_encoding = encoding
            data.gm_nginx_timestamp = now
            file:write(cjson.encode(data).."\\n")
            file:close()

            local rec = {error=0, data=0, message=0}
            ngx.say(cjson.encode(rec))
        ';
        access_log /data/log/nginx/access.log post_log;
    }

    location  /log/precise_exposure {
        lua_need_request_body on;
        content_by_lua '
            local zlib = require "zlib"
            local cjson = require "cjson"
            local encoding = ngx.req.get_headers()["Content-Encoding"]

            local body = ngx.req.get_body_data()
            local decoded_body

            if encoding == "gzip" then
                local stream = zlib.inflate()
                decoded_body = stream(body, "finish")
            else
                decoded_body = body
            end
            local data = cjson.decode(decoded_body)

	    local filename = "/data/logstash/app_input/precise_exposure/precise_exposure.log-"..os.date("%Y-%m-%d")
            local file=io.open(filename, "a+")
	    for key, value in pairs(data) do
                file:write(cjson.encode(value).."\\n")
            end
            file:close()

	    ngx.update_time()
            local now = ngx.now()
	    local filename_2 = "/data/log/nginx-maidian/precise_exposure/precise_exposure."..ngx.today().."."..ngx.var.pid..".log"
            local file = io.open(filename_2, "a+")
	    data.gm_nginx_content_encoding = encoding
            data.gm_nginx_timestamp = now
            file:write(cjson.encode(data).."\\n")
            file:close()

            local rec = {error=0, data=0, message=0}
            ngx.say(cjson.encode(rec))';
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        access_log /data/log/nginx/access.log post_log;
    }
}
